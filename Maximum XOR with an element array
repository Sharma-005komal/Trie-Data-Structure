/********************Maximum XOR with an element from array**************************/

#include <bits/stdc++.h>
using namespace std;

struct Node
{
    Node* link[2];
    
    bool containkey(int ind)
    {
        return (link[ind] != NULL);
    }
    
    Node* get(int ind)
    {
        return link[ind];
    }
    
    void put(int ind, Node* node)
    {
        link[ind] = node;
    }
};

class Trie
{
    private:
       Node* root;
       
    public:
        Trie()
        {
            root = new Node();
        }
        
        void insert(int num)
        {
            Node* node = root;
            for(int i=31; i>=0; i--)
            {
                int bit = (num>>i) & 1;
                if(!node->containkey(bit))
                {
                    node->put(bit, new Node());
                }
                node = node->get(bit);
            }
        }
        
        int findMax(int num)
        {
            Node* node = root;
            int maxNum = 0;
            for(int i=31; i>=0; i--)
            {
                int bit = (num>>i) & 1;
                if(node->containkey(!bit))
                {
                    maxNum = maxNum | (1<<i);
                    node = node->get(!bit);
                }
                else
                {
                    node = node->get(bit);
                }
            }
            return maxNum;
        }
};

vector<int> maxXORQueries(vector<int>& arr, vector<vector<int>>& queries)
{
    vector<int> ans(queries.size(), 0);
    vector<pair<int, pair<int, int>>> oQ;
    sort(arr.begin(), arr.end());
    int index = 0;
    for(auto& it:queries)
    {
        oQ.push_back({it[1], {it[0], index++}});
    }
    sort(oQ.begin(), oQ.end());
    int i = 0; 
    int n = arr.size();
    
    Trie trie;
    for(auto& it:oQ)
    {
        while(i<n && arr[i]<=it.first)
        {
            trie.insert(arr[i]);
            i++;
        }
        if(i != 0)
        {
            ans[it.second.second] = trie.findMax(it.second.first);
        }
        else
        {
            ans[it.second.second] = -1;
        }
    }
    return ans;
}


int main()
{
    vector<int> a = {1,3,2,5,4};
    vector<vector<int>> q = {{3,4,0}, 
                             {5,2,1}, 
                             {2,5,2}, 
                             {3,1,3}};
    cout<<maxXORQueries(a, q)<<endl;

    return 0;
}
